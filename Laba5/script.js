function Task1() {
    // Створення об'єкта "Співробітник"
    var worker = {
        Прізвище: 'Зубенко',
        Імя: 'Міхаїл',
        Стать: 'чоловіча',
        Вік: 50
    };
    
    // Відображення результату
    alert("Прізвище: " + worker.Прізвище + "\nІм'я: " + worker.Імя + "\nСтать: " + worker.Стать + "\nВік: " + worker.Вік);
}

function Task2() {
    // Створення об'єкта "Зарплата" з властивостями
    var salary = {
        Посада: "",
        Ставка: 0,
    
        // Метод для порахування зарплати
        порахуватиЗарплату: function () {
            return "Зарплата: " + this.Ставка;
        },
    
        // Метод для зміни ставки
        змінитиСтавку: function (новаСтавка) {
            this.Ставка = новаСтавка;
            return "Ставка змінена на " + новаСтавка;
        },
    
        // Метод для виведення інформації
        вивестиІнформацію: function () {
            return "Посада: " + this.Посада + "\nСтавка: " + this.Ставка;
        }
    };

    salary.Посада = "Мафіознік";
    salary.Ставка = 1000;

    alert(salary.порахуватиЗарплату());
    alert(salary.змінитиСтавку(1200));
    alert(salary.вивестиІнформацію());
}

function Task3() {
    // Створення об'єкта "Співробітник"
var worker = {
    Прізвище: 'Зубенко',
    Імя: 'Міхаїл',
    Стать: 'чоловіча',
    Вік: 50
};

// Створення об'єкта "Зарплата"
var salary = {
    Посада: "Мафіознік",
    Ставка: 200,

    // Метод для порахування зарплати
    порахуватиЗарплату: function () {
        return "Зарплата: " + this.Ставка;
    },

    // Метод для зміни ставки
    змінитиСтавку: function (новаСтавка) {
        this.Ставка = новаСтавка;
        return "Ставка змінена на " + новаСтавка;
    },

    // Метод для виведення інформації
    вивестиІнформацію: function () {
        return "Посада: " + this.Посада + "\nСтавка: " + this.Ставка;
    }
};

// Копіювання властивостей і методів від "Співробітник" до "Зарплата"
for (var key in worker) {
    if (worker.hasOwnProperty(key)) {
        salary[key] = worker[key];
    }
}
    alert("Об'єкт 'Зарплата' після копіювання властивостей та методів з 'Співробітник':\nПосада: " + salary.Посада + "\nСтавка: " + salary.Ставка + "\nПрізвище: " + salary.Прізвище + "\nІм'я: " + salary.Імя + "\nСтать: " + salary.Стать + "\nВік: " + salary.Вік);

}

function Task4() {
    let worker1 = Task1();
    // Додавання методу "Показати дані" до прототипу об'єкта "Співробітник"
    worker1.prototype.ПоказатиДані = function () {
        return "Прізвище: " + this.Прізвище + "\nІм'я: " + this.Імя + "\nСтать: " + this.Стать + "\nВік: " + this.Вік;
    };
    
    alert(worker.ПоказатиДані());
  
}

function Task5() {
    // Оголошення конструктора для об'єкту "Співробітник"
function Співробітник(прізвище, імя, стать, вік) {
    this.Прізвище = прізвище;
    this.Імя = імя;
    this.Стать = стать;
    this.Вік = вік;
}

// Метод "Показати дані" для об'єкту "Співробітник"
Співробітник.prototype.ПоказатиДані = function () {
    return "Прізвище: " + this.Прізвище + "\nІм'я: " + this.Імя + "\nСтать: " + this.Стать + "\nВік: " + this.Вік;
};

// Оголошення конструктора для об'єкту "Керівник" з використанням наслідування
function Керівник(прізвище, імя, стать, вік, відділ) {
    // Виклик конструктора об'єкту "Співробітник" для успадкування властивостей
    Співробітник.call(this, прізвище, імя, стать, вік);
    
    // Додавання власної властивості "Відділ" до об'єкту "Керівник"
    this.Відділ = відділ;
}

// Наслідування прототипу об'єкту "Співробітник" для об'єкту "Керівник"
Керівник.prototype = Object.create(Співробітник.prototype);

// Перевизначення методу "Показати дані" для об'єкту "Керівник"
Керівник.prototype.ПоказатиДані = function () {
    // Виклик оригінального методу для об'єкту "Співробітник"
    var базовийРезультат = Співробітник.prototype.ПоказатиДані.call(this);
    // Додавання власної інформації про відділ
    return базовийРезультат + "\nВідділ: " + this.Відділ;
};

    // Створення об'єкта "Керівник"
    var керівник = new Керівник('Іванов', 'Олег', 'чоловіча', 45, 'Відділ розробки');
    
    // Виведення інформації про керівника з використанням перевизначеного методу
    alert(керівник.ПоказатиДані());
}

function Task6() {
    // Клас "СпівробітникКлас"
class СпівробітникКлас {
    constructor(прізвище, імя, стать, вік) {
        this._прізвище = прізвище;
        this._ім_я = імя;
        this._стать = стать;
        this._вік = вік;
    }

    // Геттери та сеттери для властивостей
    get прізвище() {
        return this._прізвище;
    }

    set прізвище(value) {
        this._прізвище = value;
    }

    get ім_я() {
        return this._ім_я;
    }

    set ім_я(value) {
        this._ім_я = value;
    }

    get стать() {
        return this._стать;
    }

    set стать(value) {
        this._стать = value;
    }

    get вік() {
        return this._вік;
    }

    set вік(value) {
        this._вік = value;
    }

    // Метод "Показати дані"
    показатиДані() {
        return `Прізвище: ${this._прізвище}\nІм'я: ${this._ім_я}\nСтать: ${this._стать}\nВік: ${this._вік}`;
    }
}

// Клас "КерівникКлас", який успадковує від "СпівробітникКлас"
class КерівникКлас extends СпівробітникКлас {
    constructor(прізвище, імя, стать, вік, відділ) {
        // Виклик конструктора батьківського класу
        super(прізвище, імя, стать, вік);
        this._відділ = відділ;
    }

    // Геттер та сеттер для властивості "Відділ"
    get відділ() {
        return this._відділ;
    }

    set відділ(value) {
        this._відділ = value;
    }

    // Перевизначений метод "Показати дані" для класу "КерівникКлас"
    показатиДані() {
        // Виклик методу батьківського класу за допомогою super
        const базовийРезультат = super.показатиДані();
        return `${базовийРезультат}\nВідділ: ${this._відділ}`;
    }
}
    const керівник = new КерівникКлас('Іванов', 'Олег', 'чоловіча', 45, 'Відділ розробки');
    
    // Виведення інформації про керівника з використанням перевизначеного методу
    alert(керівник.показатиДані());

}
